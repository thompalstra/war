const Map = require( "map/Map.js" ).Map;
const UnitCollection = require( "classes/UnitCollection.js" ).UnitCollection;
const Team = require( "classes/Team.js" ).Team;
const PathTracking = require( "classes/PathTracking.js" ).PathTracking;
const UIComponent = require( "ui/UIComponent.js" ).UIComponent;

window.TileHeight = 20;
window.TileWidth = 20;

window.PathTracking = PathTracking;
window.PlayerTeam = new Team( { id: 1, name: "Player" } );

class Game{
  constructor( element ){
    this.element = element;
    this.canvas = this.element.querySelector( "#canvas" );
    this.element.Game = this;

    this.element.addEventListener( "click", function( event ) {
      if( event.target.matches( "[data-action]" ) ){
        var target = event.target;
        this.Game.action( target.getAttribute( "data-action" ), target.getAttribute("data-params") );
      } else if( event.target.closest( "[data-action]" ) ){
        var target = event.target.closest( "[data-action]" );
        this.Game.action( target.getAttribute( "data-action" ), target.getAttribute("data-params") );
      }
    } );

    this.canvas.addEventListener( "mouseup", ( event ) => {
      if( event.which == 1 ){
        // left click
        if( PlayerTeam.selection.length > 0 ){
          // move
          var coords = this.Map.getCoords( event.offsetX, event.offsetY );
          PlayerTeam.selection.forEach( ( obj ) => {
            obj.moveOrder( coords )
          } )
        } else {
          // select
          var coords = this.Map.getCoords( event.offsetX, event.offsetY );
          var obj = this.Map.getObject( coords );
          if( obj.team == PlayerTeam ){
            PlayerTeam.selection = [ obj ];
          }
        }

      } else if( event.which == 3 ){
        if( PlayerTeam.selection.length > 0 ){
          // unselect
          PlayerTeam.selection = [];
        } else {

        }
      }

    } );

    this.UIComponents = {};

    this.canvas.height = this.element.offsetHeight;
    this.canvas.width = this.element.offsetWidth;

    this.canvas.offsetX = 0;
    this.canvas.offsetY = 0;

    this.UnitCollection = new UnitCollection();

    var units = this.UnitCollection.collection();

    for( var i in units ){
      var unit = require( units[i] ).unit;
      window[ unit.name ] = unit;
    }

    this.Map = new Map( this, null );

  }
  start(){
    var map = require( `lib/maps/m1.js` ).Map;
    this.load( map );

    var npcTeam = new Team( {
      id: 2,
      name: "Computer"
    } );
    var playerSquad = new Squad( {
      pos: { x: 2, y: 2},
      fill: "blue"
    } );
    var npcSquad = new Squad( {
      pos: { x: 7, y: 7 },
      fill: "orange"
    } );

    playerSquad.assignTeam( PlayerTeam );
    npcSquad.assignTeam( npcTeam );

    this.Map.add( npcSquad );
    this.Map.add( playerSquad );
  }
  startSkirmish( map ){

    this.closeUIComponent( "skirmish" );
    this.closeUIComponent( "home" );

    var map = require( `lib/maps/${map}` ).Map;
    this.load( map );
  }
  load( mapData ){
    this.Map = new Map( this, mapData );
    this.Map.Game = this;
    this.Map.tick();
  }
  createUIComponent( name, path ){
    this.UIComponents[ name ] = new UIComponent( name, path );
    this.element.querySelector( "ui" ).appendChild( this.UIComponents[ name ].element );
  }
  closeUIComponent( name ){
    if( typeof this.UIComponents[ name ] !== "undefined" && this.UIComponents[ name ] instanceof UIComponent ){
      this.UIComponents[ name ].element.remove();
      delete this.UIComponents[ name ];
    }
  }
  action( name, params ) {
    if( this[ name ] ){
      this[ name ].apply( this, JSON.parse( params ) );
    }
  }
  showSkirmishMenu( params ){
    this.createUIComponent( "skirmish", "ui/skirmish.html" );
  }
}
module.exports = {
  Game: Game
};
