const Renderer = require( "map/Renderer.js" ).Renderer;
const Logic = require( "map/Logic.js" ).Logic;
const TileCollection = require( "../lib/tiles/TileCollection.js" ).TileCollection;
const Tile = require( "../lib/tiles/Tile.js" ).Tile;
class Map{
  constructor( Game, mapData ){
    if( typeof mapData === "undefined" || mapData === null ){
      return;
    }
    this.Game = Game;
    this.path = [];
    this.tiles = [];
    this.objects = [];

    this.TileData = TileCollection.getTileData();

    mapData.forEach( ( row, ri ) => {
      row.forEach( ( tile, ti ) => {
        if( typeof this.tiles[ ti ] === "undefined" ){
          this.tiles[ ti ] = [];
          this.path[ ti ] = [];
        }
        this.tiles[ ti ][ ri ] = new Tile( ti, ri, this.TileData[ tile ] );
        this.path[ ti ][ ri ] = this.tiles[ ti ][ ri ].passable ? 0 : 1;
      } )
    } )

    this.Renderer = new Renderer( this, this.Game.canvas.getContext( "2d" ) );
    this.Logic = new Logic( this );
    this.Game.createUIComponent( "home", "ui/overlay.html" );
  }
  tick(){
    game.Map.Renderer.render();
    game.Map.Logic.logic();
    setTimeout( ( e ) => {
        requestAnimationFrame( game.Map.tick );
    }, ( 1000 / 30 ) );
  }
  add( obj ){
    if( obj instanceof TemplateUnit ){
      obj.Map = this;
      this.objects.push( obj );
    }
  }
  getCoords( offsetX, offsetY ){
    return {
      x: parseInt( offsetX / TileWidth ),
      y: parseInt( offsetY / TileHeight ),
    }
  }
  getObject( pos ){
    var o = false;
    this.objects.forEach( ( obj ) => {
      if( obj.pos.x == pos.x && obj.pos.y == pos.y ){
        o = obj;
      }
    } )
    return o;
  }
}
module.exports = { Map: Map };
